package encodekit

import (
	"Ripper/udpkit"
	"fmt"
	"testing"
	"time"
)

type TrackerP2pStat struct {
	Cmd            byte
	TimeStamp      [4]byte
	TrackerAppList [1]TrackerApp
}

type TrackerApp struct {
	Appid           [4]byte
	PeerCount       [4]byte
	QPS             [4]byte
	FormTrackerList [4]FormTracker
}
type FormTracker struct {
	SrcRecv [8]byte
	P2pRecv [8]byte
	P2pSend [8]byte
}

func TestBinaryWrite(t *testing.T) {
	msg := TrackerP2pStat{
		Cmd:       0x50,
		TimeStamp: [4]byte{0x80, 0x84, 0xaf, 0x5f},
		TrackerAppList: [1]TrackerApp{
			{Appid: [4]byte{0x80, 0x84, 0xaf, 0x5f},
				PeerCount: [4]byte{0x80, 0x84, 0xaf, 0x5f},
				QPS:       [4]byte{0x80, 0x84, 0xaf, 0x5f},
				FormTrackerList: [4]FormTracker{
					//80 89 ae cd d4 df c6 03
					{SrcRecv: [8]byte{0x80, 0x89, 0xae, 0xcd, 0xd4, 0xdf, 0xc6, 0x03},
						P2pRecv: [8]byte{0x80, 0x89, 0xae, 0xcd, 0xd4, 0xdf, 0xc6, 0x03},
						P2pSend: [8]byte{0x80, 0x89, 0xae, 0xcd, 0xd4, 0xdf, 0xc6, 0x03}},

					{SrcRecv: [8]byte{0x80, 0x89, 0xae, 0xcd, 0xd4, 0xdf, 0xc6, 0x03},
						P2pRecv: [8]byte{0x80, 0x89, 0xae, 0xcd, 0xd4, 0xdf, 0xc6, 0x03},
						P2pSend: [8]byte{0x80, 0x89, 0xae, 0xcd, 0xd4, 0xdf, 0xc6, 0x03}},

					{SrcRecv: [8]byte{0x80, 0x89, 0xae, 0xcd, 0xd4, 0xdf, 0xc6, 0x03},
						P2pRecv: [8]byte{0x80, 0x89, 0xae, 0xcd, 0xd4, 0xdf, 0xc6, 0x03},
						P2pSend: [8]byte{0x80, 0x89, 0xae, 0xcd, 0xd4, 0xdf, 0xc6, 0x03}},

					{SrcRecv: [8]byte{0x80, 0x89, 0xae, 0xcd, 0xd4, 0xdf, 0xc6, 0x03},
						P2pRecv: [8]byte{0x80, 0x89, 0xae, 0xcd, 0xd4, 0xdf, 0xc6, 0x03},
						P2pSend: [8]byte{0x80, 0x89, 0xae, 0xcd, 0xd4, 0xdf, 0xc6, 0x03}},
				},
			},
		},
	}

	udpkit.UdpServer("127.0.0.1:8880")
	time.Sleep(1 * time.Second)
	go func() {
		for {
			select {
			case msg := <-udpkit.RequestChannel:
				body := msg[5:]
				l := len(body) / 108
				head := 0
				tail := 108
				for i := 0; i < l; i++ {
					buf := TrackerApp{}
					BinaryRead(body[head:tail], &buf)
					fmt.Println(BinaryVarint(buf.FormTrackerList[0].P2pRecv[:]))
					head = tail
					tail += 108
				}

			}
		}
	}()
	udpkit.UdpClient("127.0.0.1", 8880, BinaryWrite(msg))
	time.Sleep(1 * time.Second)

}
