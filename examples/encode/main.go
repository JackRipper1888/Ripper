package main

import (
	"Ripper/encodekit"
	"Ripper/udpkit"
	"flag"

	"bytes"
	"encoding/binary"
)

type TrackerP2pStat struct {
	Cmd            byte
	TimeStamp      [4]byte
	TrackerAppList [1]TrackerApp
}

type TrackerApp struct {
	Appid           [4]byte
	PeerCount       [4]byte
	QPS             [4]byte
	FormTrackerList [4]FormTracker
}
type FormTracker struct {
	SrcRecv [8]byte
	P2pRecv [8]byte
	P2pSend [8]byte
}

var msg = TrackerP2pStat{
	Cmd: 0x50,
	// 0b0000000000
	TimeStamp: [4]byte{0x5f, 0x17, 0xb6, 0x61},
	TrackerAppList: [1]TrackerApp{
		{
			Appid:     [4]byte{0x5f, 0x03, 0xed, 0x64},
			PeerCount: [4]byte{0x5f, 0x03, 0xed, 0x64},
			QPS:       [4]byte{0x5f, 0x03, 0xed, 0x64},
			FormTrackerList: [4]FormTracker{
				//80 89 ae cd d4 df c6 03
				{
					SrcRecv: [8]byte{0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x10, 0x00},
					P2pRecv: [8]byte{0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x10, 0x00},
					P2pSend: [8]byte{0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x10, 0x00},
				},

				{
					SrcRecv: [8]byte{0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x10, 0x00},
					P2pRecv: [8]byte{0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x10, 0x00},
					P2pSend: [8]byte{0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x10, 0x00},
				},

				{
					SrcRecv: [8]byte{0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x10, 0x00},
					P2pRecv: [8]byte{0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x10, 0x00},
					P2pSend: [8]byte{0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x10, 0x00},
				},

				{
					SrcRecv: [8]byte{0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x10, 0x00},
					P2pRecv: [8]byte{0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x10, 0x00},
					P2pSend: [8]byte{0x00, 0x00, 0x00, 0xe8, 0xd4, 0xa5, 0x10, 0x00},
				},
			},
		},
	},
}

func BytesToInt32(b []byte) int32 {
	bytesBuffer := bytes.NewBuffer(b)
	var x int32
	binary.Read(bytesBuffer, binary.BigEndian, &x)
	return x
}

func main() {
	target := flag.String("d", "", "target peer to dial")
	flag.Parse()
	if *target == "" {
		udpkit.UdpClient("127.0.0.1", 5000, encodekit.BinaryWrite(msg))
	} else {
		udpkit.UdpClient(*target, 5000, encodekit.BinaryWrite(msg))
	}
}
